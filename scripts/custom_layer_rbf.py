# -*- coding: utf-8 -*-
"""custom layer rbf.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1hjaTZ3zt4l54UCMdV0Bsx25PZ1ggXfIh
"""

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_percentage_error

configurations  = pd.read_csv('/content/configurations.csv', header=None).values
energy= pd.read_csv('/content/energy.csv', header=None).values

X_train, X_test, y_train, y_test = train_test_split(configurations, energy, test_size=0.2, random_state=42)
X_train = np.asarray(X_train, dtype=np.float32)
X_test = np.asarray(X_test, dtype=np.float32)
y_train = np.asarray(y_train, dtype=np.float32).reshape(-1, 1)
y_test = np.asarray(y_test, dtype=np.float32).reshape(-1, 1)

import tensorflow as tf

class GaussianRBFLayer:
    def __init__(self, units, gamma):
        self.units = units
        self.gamma = gamma
        self.centers = None
        self.betas = None

    def fit(self, X):
        random_idx = np.random.choice(X.shape[0], self.units, replace=False)
        self.centers = X[random_idx]
        self.betas = np.ones(self.units) / (2 * self.gamma ** 2)

    def transform(self, X):
        G = np.zeros((X.shape[0], self.units))
        for i in range(self.units):
            diff = X - self.centers[i]
            G[:, i] = np.exp(-self.betas[i] * np.sum(diff ** 2, axis=1))
        return G

class RBFNetwork:
    def __init__(self, rbf_units, gamma):
        self.rbf_layer = GaussianRBFLayer(rbf_units, gamma)
        self.weights = None

    def fit(self, X, y):
        self.rbf_layer.fit(X)
        G = self.rbf_layer.transform(X)
        G = np.hstack((np.ones((G.shape[0], 1)), G))  # Add bias term
        self.weights = np.linalg.pinv(G.T @ G) @ G.T @ y

    def predict(self, X):
        G = self.rbf_layer.transform(X)
        G = np.hstack((np.ones((G.shape[0], 1)), G))  # Add bias term
        return G @ self.weights

rbf_units = 32
gamma = 1.0
model = RBFNetwork(rbf_units, gamma)

model.fit(X_train, y_train)

y_train_pred = model.predict(X_train)
y_test_pred = model.predict(X_test)

print('Train R2:', r2_score(y_train, y_train_pred))
print('Train MSE:', mean_squared_error(y_train, y_train_pred))
print('Test MSE:', mean_squared_error(y_test, y_test_pred))
print('Test R2:', r2_score(y_test, y_test_pred))

plt.figure(figsize=(8, 6))
plt.scatter(y_test, y_test_pred, color='b', alpha=0.5)
plt.plot([y_test.min(), y_test.max()], [y_test.min(), y_test.max()], 'k--', lw=2)
plt.xlabel('True Energy')
plt.ylabel('Predicted Energy')
plt.title('True vs. Predicted Energy States')
plt.grid(True)
plt.show()

y_test_pred = model.predict(X_test)
y_train_pred = model.predict(X_train)

print('Train R2:', r2_score(y_train, y_train_pred))
print('Train MSE:', mean_squared_error(y_train, y_train_pred))
print('Test MSE:', mean_squared_error(y_test, y_test_pred))
print('Test R2:', r2_score(y_test, y_test_pred))

import pandas as pd


df = pd.read_csv('/content/Pt-1.csv')

condition =(df.iloc[:, 3] == 1) & (df.iloc[:, 7] == 1)&(df.iloc[:, 8] == 1) &(df.iloc[:, 9] == 1) & (df.iloc[:, 12] == 1) & (df.iloc[:, 13] == 1) & (df.iloc[:, 14] == 1) & (df.iloc[:, 17] == 1) & (df.iloc[:, 18] == 1) & (df.iloc[:, 19] == 1)& (df.iloc[:, 20] == 1)& (df.iloc[:, 25] == 1)


matching_row_indices = df[condition].index.tolist()

print("Matching row indices:", matching_row_indices)

condition = & (df.iloc[:, 7] == 1)  & (df.iloc[:, 8] == 1) & (df.iloc[:, 16] == 1)  & (df.iloc[:, 1] == 1)  & (df.iloc[:, 14] == 1) & (df.iloc[:, 2] == 1)   & (df.iloc[:, 0] == 1)  & (df.iloc[:, 12] == 1)

import pandas as pd

def remove_rows_with_value(input_csv, output_csv, column_index, value_to_remove):
    # Read the CSV file into a DataFrame without headers
    df = pd.read_csv(input_csv, header=None)

    # Filter out rows where the specified column (index) has the value 9999
    df_filtered = df[df[column_index] != value_to_remove]

    # Save the filtered DataFrame back to a CSV file
    df_filtered.to_csv(output_csv, index=False, header=False)

    print(f"Rows with {value_to_remove} in column index {column_index} have been removed.")

# Example usage
input_csv = '/content/Pt-1.csv'
output_csv = 'output.csv'
column_index = 28
value_to_remove = -10000

remove_rows_with_value(input_csv, output_csv, column_index, value_to_remove)

