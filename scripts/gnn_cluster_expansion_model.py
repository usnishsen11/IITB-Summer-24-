# -*- coding: utf-8 -*-
"""gnn- cluster expansion model.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1CkkPdcJOMmLueeobR3fX55JDHYn_cFlu
"""

import numpy as np
import pandas as pd

data = pd.read_csv('/content/ag-1.csv')

energy1= data['Activation Barrier (eV)']

energy=energy1.to_numpy()

energy

mod_data=data.drop(['S.No','Prefactor (s-1)','Number of transition states found','Activation Barrier (eV)'],axis=1)

mod_data

configurations=[]
for i in range(len(mod_data)):
  config1=mod_data.iloc[i]
  config=config1.to_numpy()
  configurations.append(config)

configurations

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler

configurations_train, configurations_test, energy_train, energy_test = train_test_split(configurations, energy, test_size=0.3, random_state=42)

np.shape(configurations_test)

np.shape(configurations_train)

from sklearn.decomposition import PCA

pca = PCA(n_components=2)
configuration_train_pca = pca.fit_transform(configurations_train)
configuration_test_pca = pca.transform(configurations_test)

import matplotlib.pyplot as plt


x = [0,1, 2, 3, 4, 5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27]

plt.figure(figsize=(14, 7))

plt.subplot(1, 2, 1)
plt.scatter(configuration_train_pca[:, 0], configuration_train_pca[:, 1], c=energy_train, cmap='viridis', label='Training Data', alpha=0.5)
plt.title('Training Data')
plt.xlabel('Configuration')
plt.ylabel('Energy')
plt.legend()

import tensorflow as tf

model = tf.keras.Sequential([
    tf.keras.layers.Input(shape=(28,)),
    tf.keras.layers.Dense(4, activation='relu'),
    tf.keras.layers.Dense(1)
])

configuration_train = np.asarray(configurations_train, dtype=np.float32)
configuration_test = np.asarray(configurations_test, dtype=np.float32)
energies_train = np.asarray(energy_train, dtype=np.float32).reshape(-1, 1)
energies_test = np.asarray(energy_test, dtype=np.float32).reshape(-1, 1)

np.shape(configuration_train)

model.compile(optimizer='adam', loss='mse')

model.fit(configuration_train, energies_train, epochs=20, batch_size=32, validation_split=0.2)

mse = model.evaluate(configuration_test, energies_test)
print("Test MSE:", mse)

predicted_barriers= model.predict(configuration_test)

predicted_barriers.max()

plt.figure(figsize=(8, 6))
plt.scatter(energies_test, predicted_barriers, color='b', alpha=0.5)
plt.plot([energies_test.min(), energies_test.max()], [energies_test.min(), energies_test.max()], 'k--', lw=2)
plt.xlabel('True Energy')
plt.ylabel('Predicted Energy')
plt.title('True vs. Predicted Energy States')
plt.grid(True)
plt.ylim(0,1)
plt.show()

#linear regression
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error

model1=LinearRegression()
model1.fit(configuration_train,energies_train)

train_pred= model1.predict(configuration_train)
test_pred=model1.predict(configuration_test)

train_mse=mean_squared_error(energies_train,train_pred)
test_mse=mean_squared_error(energies_test,test_pred)

test_mse

plt.figure(figsize=(8, 6))
plt.scatter(energy_test, test_pred, color='b', alpha=0.5)
plt.plot([energy_test.min(), energy_test.max()], [energy_test.min(), energy_test.max()], 'k--', lw=2)
plt.xlabel('True Energy')
plt.ylabel('Predicted Energy')
plt.title('True vs. Predicted Energy States')
plt.grid(True)
plt.ylim(0, 1)
plt.show()

from sklearn.tree import DecisionTreeRegressor

tree_model = DecisionTreeRegressor(random_state=0)
tree_model.fit(configuration_train, energy_train)

train_predictions = tree_model.predict(configuration_train)
test_predictions = tree_model.predict(configuration_test)

train_mse2 = mean_squared_error(energies_train, train_predictions)
test_mse2 = mean_squared_error(energies_test, test_predictions)

test_mse2

