# -*- coding: utf-8 -*-
"""ann ce model (one way).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1e9xJWzLDaNLDVeBlKypj0p2i8FuP1m8R
"""

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_percentage_error

data = pd.read_csv('/content/input_data(Ag).csv', header=None)
data1 = pd.read_csv('/content/configurations.csv', header=None)
data=data.iloc[1:]
data1=data1.iloc[1:]
input_data = data1.iloc[:,:28]
output_data = data.iloc[:,22]

input_data

X_train, X_test, y_train, y_test = train_test_split(input_data, output_data, test_size=0.30, random_state=42)

import tensorflow as tf

model = tf.keras.Sequential([
    tf.keras.layers.Input(shape=(16,)),
    tf.keras.layers.Dense(32, activation='relu'),
    tf.keras.layers.Dense(64, activation='relu'),
    tf.keras.layers.Dense(1)
])

X_train = np.asarray(X_train, dtype=np.float32)
X_test = np.asarray(X_test, dtype=np.float32)
y_train = np.asarray(y_train, dtype=np.float32).reshape(-1, 1)
y_test = np.asarray(y_test, dtype=np.float32).reshape(-1, 1)

optimizer = tf.keras.optimizers.SGD(learning_rate=0.01)
model.compile(optimizer=optimizer, loss='mse')

'''class PrintWeightsCallback(tf.keras.callbacks.Callback):
    def __init__(self, file_prefix='weights_epoch'):
        super().__init__()
        self.file_prefix = file_prefix
        self.epoch_count = 0
    def on_epoch_end(self, epoch, logs=None):
        self.epoch_count += 1
        weight_data = {}
        for layer_index, layer in enumerate(self.model.layers):
            weights = layer.get_weights()
            weight_data[f'layer_{layer_index}_weights'] = weights[0].flatten()  # Flatten weights
            weight_data[f'layer_{layer_index}_biases'] = weights[1].flatten()   # Flatten biases
        df = pd.DataFrame(dict([(k, pd.Series(v)) for k, v in weight_data.items()]))
        df.to_csv(f'{self.file_prefix}_{self.epoch_count}.csv', index=False)
        print(f'After epoch {epoch + 1}, weights saved to {self.file_prefix}_{self.epoch_count}.csv')'''

model.fit(X_train,y_train, epochs=20, batch_size=10, validation_split=0.2)

mse = model.evaluate(X_test, y_test)

print("Test MSE:", mse)

Y_testpred = model.predict(X_test)
Y_trainpred =model.predict(X_train)

'''Y_testpred
df = pd.DataFrame(Y_testpred)
csv_file_path = 'test pred_output.csv'
df.to_csv(csv_file_path, index=False)'''

print('Train R2', r2_score(y_train, Y_trainpred))
print('Train MSE', mean_squared_error(y_train, Y_trainpred))
print('Test MSE', mean_squared_error(y_test, Y_testpred))
print('Test R2', r2_score(y_test, Y_testpred))

plt.figure(figsize=(8, 6))
plt.scatter(Y_testpred,y_test , color='b', alpha=0.5)
plt.plot([y_test.min(), y_test.max()], [y_test.min(), y_test.max()], 'k--', lw=2)
plt.xlabel('True Energy')
plt.ylabel('Predicted Energy')
plt.title('True vs. Predicted Energy States')
plt.grid(True)
plt.ylim(0,1.2)
plt.xlim(0,1.2)
plt.show()

plt.figure(figsize=(8, 6))
plt.hist(Y_testpred, bins=30, color='blue', alpha=0.7)
plt.hist(y_test, bins=30, color='green', alpha=0.7)
plt.xlabel('Predicted Energy')
plt.ylabel('Number of Datasets')
plt.title('Histogram of Predicted Energies')
plt.grid(True)
plt.show()

